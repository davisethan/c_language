Ex 1 Dusting Off That Compiler
    $ make ex1
    $ ./ex1

Ex 2 Using Makefiles to Build
    $ make clean
    $ make ex1

Ex 5 Memorizing C Operators
    Data Operators
        sizeof(): Get size of
        []: Array subscript
        &: Address of
        *: Value of
        ->: Structure dereference
        .: Structure reference

Ex 6 Memorizing C Syntax
    Keywords
        auto: Give local variable local lifetime
        break: Exit compound statement
        case: Branch in switch-statement
        char: Character data type
        const: Make variable unmodifiable
        continue: Continue to top of loop
        default: Default branch in switch-statement
        do: Start do-while loop
        double: Double floating-point data type
        else: Else branch in if-statement
        enum: Define set of integer constants
        extern: Declare identifier is defined externally
        float: Floating-point data type
        for: Start for-loop
        goto: Jump to label
        if: Start if-statement
        int: Integer data type
        long: Long integer data type
        register: Declare variable be stored in CPU register
        return: Return from function
        short: Short integer data type
        signed: Signed modifier for integer data types
        sizeof: Find size of data
        static: Keep variable value after scope exit
        struct: Combine variables into single record
        switch: Start switch-statement
        typedef: Create new type
        union: Start union-statement
        unsigned: Unsigned modifier for integer data types
        void: Declare data type empty
        volatile: Declare var might be modified elsewhere
        while: Start while-loop

Ex 8 If, Else-If, Else
    $ make ex8
    $ ./ex8
    $ ./ex8 one
    $ ./ex8 one two
    $ ./ex8 one two three

    - True is 1, false is 0. C doesn't have boolean data type

Ex 11 Arrays and String
    - Arrays and strings are the same to C
    - Use char * way to create strings, e.g. char *str = "C";

Ex 15 Pointers, Dreaded Pointers
    - E.g. int ages[] = {13, 15, 17}, C thinks ages is a memory address to first array element
    - Pointer is address pointing to somewhere in memory with type specified to get right size data
    - type *ptr: Pointer of type named ptr
    - *ptr: Value of what ptr points at
    - *(ptr + i): Value of what ptr points at plus i
    - &thing: Address of thing
    - type *ptr = &thing: Pointer of type named ptr set to address of thing
    - ptr++: Increment ptr pointer

Ex 17 Heap and Stack Memory Allocation
    - C standard library file operations
    - Heap is remaining memory in computer, malloc gets memory, free frees memory
    - Easy rule, if variable didn't come from malloc, it came from stack, which is easy to free after function call is over
    - Stack variables added as params and locals

Ex 18 Pointers to Functions
    - Functions are just pointers to blocks of code
    - Useful for callbacks
    - e.g. int (*POINTER_NAME)(int a, int b). int callme(int a, int b) becomes int (*compare_cb)(int a, int b)
    - Call function pointer just as function call
    - typedef lets complex data types be renamed

Ex 21 Advanced Data Types and Control Flow

Ex 22 Stack, Scope, and Globals
    - extern: Variable exists, but in external location. Here, ex22.c has variable THE_SIZE accessed in ex22_main.c
    - static (file): Variable only used in this .c file. static keyword at file level different than in other places
    - static (function): Variable only used in this function. Rarely used in modern C because hard to use with threads
    - Variables made in blocks only exist in those blocks. But don't make new variables in blocks because...
    - (Build manually)
        $ cc -Wall -g -c -o ex22.o ex22.c
        $ cc -Wall -g ex22_main.c ex22.o -o ex22_main
        $ ./ex22_main
    - Variable defined in block is defined in different place in memory
        which makes debuggin harder,
        so don't define variables in blocks
    - When in doubt, use the heap and don't rely on stack details

Ex 23 Duff's Device
